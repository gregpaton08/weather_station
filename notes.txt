Weather API:
Docs
    https://www.wunderground.com/weather/api/d/docs?MR=1
Example:
    http://api.wunderground.com/api/<API KEY>/conditions/q/NJ/Collingswood.json
    http://api.wunderground.com/api/<API KEY>/forecast/q/NJ/Collingswood.json
    # for sunrise/sunset
    http://api.wunderground.com/api/<API KEY>/astronomy/q/NJ/Collingswood.json
    # for historical data
    http://api.wunderground.com/api/<API KEY>/history_20170919/q/NJ/Collingswood.json
    # combine api requests
    http://api.wunderground.com/api/<API KEY>/hourly/history_20170919/q/NJ/Collingswood.json

Current Task:

To do:
* List the weather forecast (sunny, partly cloudy, rain, etc.) in plain text on graph.
* Design the interface
    * House graphic containing indoor temp
    * Design graphics in Sketch
    * Sun (or clouds or current weather) alongside outdoor temp
* Consolidate AJAX data request into a single request (instead of separate requests for indoor/outdoor temperature)
* Update C/F link in callback so that it is in sync with the data displayed
* Javascript date ojbect to/from JSON?


Done:
* Add historical data (data base to store inside temp?)
    * Run background process on RPi (chron) to update database with indoor temperature every 10 minutes
    * Access database in flask app http://flask.pocoo.org/docs/0.12/tutorial/schema/
* Graph inside temp
* Graph forecast for outside
* Set up subdomain of gregpaton08.com to point to RPi (use A Record and noip.com)
* Track indoor/outdoor temperature once every hour (register cron job or python process?)
* Setup Flask server for app
* parse JSON for temperature data
* hook up thermometer to RPi
* write POC pyton script to get temperature from thermometer
* store on github (hide API key!)
* Generate new API key
* Add option to choose celsius or fahrenheit
* Compute C to F conversion in javascript to avoid network access to the server
* Cache the weather results with a timestamp to limit number of API calls
    * Display the time it was last updated
    * Add an option to force refresh? <-- NO


Stretch goals:
* machine learning to predict future indoor temperature
